name: build_XiaoxinSGSIs

on: [push]

jobs:
  build:
    runs-on: ubuntu-latest
    if: github.event.repository.owner.id == github.event.sender.id

    steps:
       - name: Checkout
         uses: actions/checkout@main
       
       - name: Clean Up
         run: |
           docker rmi `docker images -q`
           sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d
           sudo -E apt-get -y purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* mysql* php*
           sudo -E apt-get update
           sudo -E apt-get -y autoremove --purge
           sudo -E apt-get clean 
           sudo -E apt-get install expect
       
       - name: Get variables
         run: |
           echo "::set-output name=fix_bug::$(jq -r '.fix_bug' sgsi.json)"
           echo "::set-output name=fix_light::$(jq -r '.fix_light' sgsi.json)"
           echo "::set-output name=rom_type::$(jq -r '.rom_type' sgsi.json)"
           echo "::set-output name=rom_url::$(jq -r '.rom_url' sgsi.json)"
           echo "::set-output name=rom_name::$(jq -r '.rom_name' sgsi.json)"
           echo "::set-output name=pack_sgsi::$(jq -r '.pack_sgsi' sgsi.json)"
           echo "::set-output name=make_miui::$(jq -r '.make_miui' sgsi.json)"
           echo "::set-output name=make_flyme::$(jq -r '.make_flyme' sgsi.json)"
           echo "::set-output name=make_coloros::$(jq -r '.make_coloros' sgsi.json)"
           echo "::set-output name=make_h2os::$(jq -r '.make_h2os' sgsi.json)"
           echo "::set-output name=make_smartisanos::$(jq -r '.make_smartisanos' sgsi.json)"
           echo "::set-output name=make_zui::$(jq -r '.make_zui' sgsi.json)"
           echo "::set-output name=make_super::$(jq -r '.make_super' sgsi.json)"
           echo "::set-output name=upload_transfer::$(jq -r '.upload_transfer' sgsi.json)"
           echo "::set-output name=upload_artifact::$(jq -r '.upload_artifact' sgsi.json)"
         id: var
                
       - name: Initialization environment
         run: |
           git clone https://github.com/xiaoxindada/SGSI-build-tool.git -b 12
           cd SGSI-build-tool-12
           cd SGSI-build-tool-12
           sudo bash setup.sh
           
       - name: Download Rom
         run: sudo wget -c ${{ steps.var.outputs.rom_url }} -O SGSI-build-tool-12/12/tmp/${{ steps.var.outputs.rom_name }}
       
       - name: Make MIUI SGSI
         if: steps.var.outputs.make_miui == 'true'
         run: |
           sudo rm -rf SGSI-build-tool-12/12/fixbug/fixbug.sh
           sudo rm -rf SGSI-build-tool-12/12/apps_clean/miui.sh
           mv fix/MIUI.sh SGSI-build-tool-12/12/fixbug/fixbug.sh
           mv app_clean/miui.sh SGSI-build-tool-12/12/apps_clean/miui.sh
           
       - name: Make Flyme SGSI
         if: steps.var.outputs.make_flyme == 'true'
         run: |
           sudo rm -rf SGSI-build-tool-12/12/fixbug/fixbug.sh
           sudo rm -rf SGSI-build-tool-12/12/apps_clean/flyme.sh
           mv fix/Flyme.sh SGSI-build-tool-12/12/fixbug/fixbug.sh
           mv app_clean/flyme.sh SGSI-build-tool-12/12/apps_clean/flyme.sh
           
       - name: Make ColorOS SGSI
         if: steps.var.outputs.make_coloros == 'true'
         run: |
           sudo python3 SGSI-build-tool-12/12/oppo_ozip/ozipdecrypt.py SGSI-build-tool-12/12/tmp/${{ steps.var.outputs.rom_name }}
           sudo rm -rf SGSI-build-tool-12/12/tmp/${{ steps.var.outputs.rom_name }} SGSI-build-tool-12/12/fixbug/fixbug.sh
           mv fix/ColorOS.sh SGSI-build-tool-12/12/fixbug/fixbug.sh
           sudo rm -rf SGSI-build-tool-12/12/apps_clean/oppo.sh
           mv app_clean/oppo.sh SGSI-build-tool-12/12/apps_clean/oppo.sh
           
       - name: Make H2OS SGSI
         if: steps.var.outputs.make_h2os == 'true'
         run: |
           sudo rm -rf SGSI-build-tool-12/12/fixbug/fixbug.sh
           mv fix/H2OS.sh SGSI-build-tool-12/12/fixbug/fixbug.sh
           sudo rm -rf SGSI-build-tool-12/12/apps_clean/h2os.sh
           mv app_clean/h2os.sh SGSI-build-tool-12/12/apps_clean/h2os.sh
           
       - name: Make SmartisanOS SGSI
         if: steps.var.outputs.make_smartisanos == 'true'
         run: |
           sudo rm -rf SGSI-build-tool-12/12/fixbug/fixbug.sh
           mv fix/SmartisanOS.sh SGSI-build-tool-12/12/fixbug/fixbug.sh
           
       - name: Make ZUI SGSI
         if: steps.var.outputs.make_zui == 'true'
         run: |
           sudo rm -rf SGSI-build-tool-12/12/fixbug/fixbug.sh
           mv fix/ZUI.sh SGSI-build-tool-12/12/fixbug/fixbug.sh
            
       - name: Generate SGSI Start
         run: |
           rm -rf SGSI-build-tool-11/11/SGSI.sh SGSI-build-tool-12/12/makeimg.sh SGSI-build-tool-12/12/bin/mke2fs SGSI-build-tool/12/bin/e2fsdroid SGSI-build-tool-12/12/make.sh
           mv make/makeimg.sh make/SGSI1.sh make/SGSI2.sh make/SGSI3.sh make/SGSI4.sh make/SGSI5.sh make/make.sh SGSI-build-tool-12/12/
           mv bin/mke2fs bin/e2fsdroid SGSI-build-tool-12/12/bin/
           cd SGSI-build-tool-12/12
           sudo bash make.sh ${{ steps.var.outputs.rom_type }}
           
       - name: Make Super
         if: steps.var.outputs.make_super == 'true'
         run: |
           cd SGSI-build-tool-12/12
           sudo bash SGSI2.sh
           
       - name: Enable Fix Light
         if: steps.var.outputs.fix_light == 'true'
         run: |
           cd SGSI-build-tool-12/12
           sudo bash SGSI3.sh
         
       - name: Enable Fix Bug
         if: steps.var.outputs.fix_bug == 'true'
         run: | 
           cd SGSI-build-tool-12/12
           sudo bash SGSI4.sh
         
       - name: Generate SGSI End
         run: |
           cd SGSI-build-tool-12/12
           sudo bash SGSI5.sh ${{ steps.var.outputs.rom_type }}
         
       - name: 7z SGSI
         run: 7za a -t7z -r ${{ steps.var.outputs.pack_sgsi }} SGSI-build-tool-12/12/SGSI/*
          
       - name: upload_transfer
         if: steps.var.outputs.upload_transfer == 'true'
         run: |
              expect -c " 
              spawn sftp ${{ secrets.SFUSER }}@frs.sourceforge.net
              expect \"yes/no\"
              send \"yes\r\" 
              expect \"Password\"        
              send \"${{ secrets.SFPASS }}\r\"
              expect \"sftp> \"
              send \"cd ${{ secrets.SFDIR }}\r\"
              set timeout -1
              send \"put ${{ steps.var.outputs.pack_sgsi }}\r\"
              expect \"Uploading\"
              expect \"100%\"
              expect \"sftp>\"
              send \"bye\r\"
              interact"
